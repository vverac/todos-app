{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from './Todo'; // const todos = [ //cambiamos a initialTodos por que estamos usando useState\n// const todos = [\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTodos = [{\n  id: 1,\n  title: 'todo #1',\n  description: 'Descripcion Todo #1',\n  complete: false\n}, {\n  id: 2,\n  title: 'todo #2',\n  description: 'Descripcion Todo #2',\n  complete: true\n}]; // hasta ahora solo estabamos realizando una iteracion para mostrar componentes\n// ahora lo que queremos es utilizar estados que nos permitan actualizaciones y que sean interactivas\n\nfunction TodoList() {\n  _s();\n\n  // // // solo dentro del componente usamos hooks como useState\n  // //const state = useState(initialState) //pero lo llamaremos initialTodos ya que estado va a componer \n  // const state = useState(initialTodos) //cambiamos el nombre de cte de nuestro array a initialTodos\n  // // // este useState(esta funcion) retona un array(arreglo) de dos posiciones \n  // const todos = state[0] //estado inicial posicion 0\n  // // //y una funcion para actualizar ese estado posicion 1\n  // const setTodos = state[1]\n  // // haciendo esto mas sencillo desestructuramos  el arreglo y le decimos que lo que ahy en la ñosicion cero lo asigne a una variable todos\n  // // y lo que esta en una poscicion 1 asignalo a una variable setTodos\n  const [todos, setTodos] = useState(initialTodos);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n      todo: todo\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 35\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoList, \"8yCmoPUuqM1vaUbV/+pWostrM30=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","Todo","initialTodos","id","title","description","complete","TodoList","todos","setTodos","map","todo"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoList.js"],"sourcesContent":["\nimport React, { useState } from 'react'\nimport Todo from './Todo'\n\n// const todos = [ //cambiamos a initialTodos por que estamos usando useState\n// const todos = [\nconst initialTodos = [\n    {\n        id: 1,\n        title: 'todo #1',\n        description: 'Descripcion Todo #1',\n        complete: false,\n    },\n    {\n        id: 2,\n        title: 'todo #2',\n        description: 'Descripcion Todo #2',\n        complete: true,\n    }\n]\n// hasta ahora solo estabamos realizando una iteracion para mostrar componentes\n// ahora lo que queremos es utilizar estados que nos permitan actualizaciones y que sean interactivas\nfunction TodoList() {\n    // // // solo dentro del componente usamos hooks como useState\n    // //const state = useState(initialState) //pero lo llamaremos initialTodos ya que estado va a componer \n    // const state = useState(initialTodos) //cambiamos el nombre de cte de nuestro array a initialTodos\n    // // // este useState(esta funcion) retona un array(arreglo) de dos posiciones \n    // const todos = state[0] //estado inicial posicion 0\n    // // //y una funcion para actualizar ese estado posicion 1\n    // const setTodos = state[1]\n\n    // // haciendo esto mas sencillo desestructuramos  el arreglo y le decimos que lo que ahy en la ñosicion cero lo asigne a una variable todos\n    // // y lo que esta en una poscicion 1 asignalo a una variable setTodos\n    const [todos, setTodos] = useState(initialTodos)\n\n    return (\n        <div>\n            <h1>TodoList</h1>\n            {\n                todos.map(todo => <Todo todo={todo} key={todo.id} />)\n            }\n        </div>\n    )\n}\n\nexport default TodoList\n\n\n\n\n"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;;;AACA,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,SAFX;EAGIC,WAAW,EAAE,qBAHjB;EAIIC,QAAQ,EAAE;AAJd,CADiB,EAOjB;EACIH,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,SAFX;EAGIC,WAAW,EAAE,qBAHjB;EAIIC,QAAQ,EAAE;AAJd,CAPiB,CAArB,C,CAcA;AACA;;AACA,SAASC,QAAT,GAAoB;EAAA;;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACE,YAAD,CAAlC;EAEA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAGQM,KAAK,CAACE,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;MAAM,IAAI,EAAEA;IAAZ,GAAuBA,IAAI,CAACR,EAA5B;MAAA;MAAA;MAAA;IAAA,QAAlB,CAHR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH;;GArBQI,Q;;KAAAA,Q;AAuBT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}