{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\n//aca trabajeremos en editar una tarea para ello creaemos un estado global pero por que un estado global? \n// por que nos servira para hacer una comunicacion entre componentes es por ello que necesitamos que este en un punto alto de la aplicacion\n// o mas alto de los componentes que lo van a utilizar(totoList y todoForm)\n// al hacer clic en editar se cargara la tarea en el formulario\nimport React, { useState } from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList'; // esto lo trajimos desde TodoList\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTodos = [{\n  id: 1,\n  title: 'todo #1',\n  description: 'Descripcion Todo #1',\n  completed: false\n}, {\n  id: 2,\n  title: 'todo #2',\n  description: 'Descripcion Todo #2',\n  completed: true\n}];\n\nfunction App() {\n  _s();\n\n  const [todos, setTodos] = useState(initialTodos);\n  const [todoEdit, setTodoEdit] = useState(null); // en viaremos todo edit a asu valor de null para no mostrar el boton necesitamos  y enviarle la funcion de actualizar(setTodoEdit) al formulario vamos a form mas abajo\n  //este state tiene la tarea que se esta actualizando actualmente(tanto title como description) es decir que cuando no sea null va a ser un objeto\n  // necesitamos actualizar este todoEdit usando el boton de editar para ello a cada todo vamos a enviarle setTodoEdit para que se pueda actualizar desde ese componente\n  // pero para llegar al todo primero debemos pasar por todoList y le pasaremos setTodoEdit para que se pueda actualizar ese componente\n  // luego de esto queremos que este contenido de las tareas se renderice en los values del formulario para que podamos editar sobre ellos\n  // entoces copiamos y copiamos nuestro estado  todoEdit y lo pasamoa al formulario\n\n  const todoDelete = todoId => {\n    if (todoId === todoEdit.id) {\n      setTodoEdit(null);\n    }\n\n    const changedTodos = todos.filter(todo => todo.id !== todoId);\n    setTodos(changedTodos);\n  };\n\n  const todoToogleCompleted = todoId => {\n    const changedTodos = todos.map(todo => todo.id === todoId ? { ...todo,\n      completed: !todo.completed\n    } : todo);\n    setTodos(changedTodos);\n  };\n\n  const todoAdd = todo => {\n    const newTodo = {\n      id: Date.now(),\n      ...todo,\n      completed: false\n    };\n    const changedTodos = [newTodo, //para que la nueva tarea se agregue en la parte superior\n    ...todos //usamos operador spred\n    // newTodo // lo cambiamos arriba\n    ];\n    setTodos(changedTodos);\n  }; // esta funcion la usaremos en /odoForm\n  // creando nuestra funcion para actualizar\n\n\n  const todoUpdate = todoEdit => {\n    //va arecibir un todo completo el cual vamos a actualizar con esa nueva informacion\n    // al revisar components vemos que que el segundo estado de App tiene toda la informacion de l todo\n    //como no podemos mutar el estado ya que tenemos que enviar un nuevo estado como por ejemplo unos changedTodo\n    // aca construimos nuestro nuevo estado, iteramos sobre todos los todo mediante map y para cada todo vamos a retornar(por ello agregamos el paraentesis)\n    // y decimos que si el id del todo sobre el cual iteramos es el mismo al id que estamos recibiendo entoncess vamos a retornar el todoEdite en caso contrario \n    // vamos a retornar el todo sin editar\n    // vemos como en esta caso el todoEdit lo traemos directamente en el argumento(esto va a ser un objeto que va a contener id,title, description complete) y estaremos pensando\n    // que en el formvalues tenemos solo title y description como para editar el funcionamiento es distinto los formValues rciben lo que tiene todoEdit\n    // y el estado global de  todoEdit si contiene id y complete, por lo tanto cuando enviemos los formValues para actualizar a diferencia de cuando loe enviamos para agreagar si contienen\n    //  el id y complete\n    const changedTodos = todos.map(todo => todo.id === todoEdit.id ? todoEdit : todo);\n    setTodos(changedTodos); //construimos nuestro nuevo estado (changedTodos) ver mas arriba\n  }; // enviamo esta funcion a nuestro componente de formulario\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-8\",\n        children: /*#__PURE__*/_jsxDEV(TodoList, {\n          todos: todos,\n          todoDelete: todoDelete,\n          todoToogleCompleted: todoToogleCompleted,\n          setTodoEdit: setTodoEdit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4\",\n        children: /*#__PURE__*/_jsxDEV(TodoForm // estados\n        , {\n          todoEdit: todoEdit // funciones\n          ,\n          todoAdd: todoAdd //     {/* vamos a utilizarlos en el todoForm pero como cargariamos estos valos sin afectar el comportamiento actual \n          // de nuestra aplicacion ? lo haremos usando hooks useEfect ... ver todoForm.js*/}\n          ,\n          todoUpdate: todoUpdate,\n          setTodoEdit: setTodoEdit //vamos al todoForm donde utilizaremos esta funcion y la recibimos en las properties\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"mczK+lgJ3tQM2QSiXIwOHOwG0To=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TodoForm","TodoList","initialTodos","id","title","description","completed","App","todos","setTodos","todoEdit","setTodoEdit","todoDelete","todoId","changedTodos","filter","todo","todoToogleCompleted","map","todoAdd","newTodo","Date","now","todoUpdate"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/App.js"],"sourcesContent":["//aca trabajeremos en editar una tarea para ello creaemos un estado global pero por que un estado global? \n// por que nos servira para hacer una comunicacion entre componentes es por ello que necesitamos que este en un punto alto de la aplicacion\n// o mas alto de los componentes que lo van a utilizar(totoList y todoForm)\n// al hacer clic en editar se cargara la tarea en el formulario\n\n\nimport React, { useState } from 'react'\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\n\n// esto lo trajimos desde TodoList\nconst initialTodos = [\n    {\n        id: 1,\n        title: 'todo #1',\n        description: 'Descripcion Todo #1',\n        completed: false,\n    },\n    {\n        id: 2,\n        title: 'todo #2',\n        description: 'Descripcion Todo #2',\n        completed: true,\n    }\n]\n\nfunction App() {\n    const [todos, setTodos] = useState(initialTodos)\n    const [todoEdit, setTodoEdit] = useState(null)\n    // en viaremos todo edit a asu valor de null para no mostrar el boton necesitamos  y enviarle la funcion de actualizar(setTodoEdit) al formulario vamos a form mas abajo\n\n    //este state tiene la tarea que se esta actualizando actualmente(tanto title como description) es decir que cuando no sea null va a ser un objeto\n    // necesitamos actualizar este todoEdit usando el boton de editar para ello a cada todo vamos a enviarle setTodoEdit para que se pueda actualizar desde ese componente\n    // pero para llegar al todo primero debemos pasar por todoList y le pasaremos setTodoEdit para que se pueda actualizar ese componente\n\n    // luego de esto queremos que este contenido de las tareas se renderice en los values del formulario para que podamos editar sobre ellos\n    // entoces copiamos y copiamos nuestro estado  todoEdit y lo pasamoa al formulario\n\n    const todoDelete = (todoId) => {\n\n        if (todoId === todoEdit.id) {\n            setTodoEdit(null)\n        }\n        const changedTodos = todos.filter(todo => todo.id !== todoId)\n        setTodos(changedTodos);\n    }\n\n    const todoToogleCompleted = (todoId) => {\n        const changedTodos = todos.map(todo => todo.id === todoId ? { ...todo, completed: !todo.completed } : todo)\n\n        setTodos(changedTodos)\n    }\n\n    const todoAdd = (todo) => {\n\n        const newTodo = {\n            id: Date.now(),\n            ...todo,\n            completed: false\n        }\n        const changedTodos = [\n            newTodo, //para que la nueva tarea se agregue en la parte superior\n            ...todos,\n            //usamos operador spred\n            // newTodo // lo cambiamos arriba\n        ]\n\n        setTodos(changedTodos)\n    }\n    // esta funcion la usaremos en /odoForm\n\n\n    // creando nuestra funcion para actualizar\n    const todoUpdate = (todoEdit) => { //va arecibir un todo completo el cual vamos a actualizar con esa nueva informacion\n        // al revisar components vemos que que el segundo estado de App tiene toda la informacion de l todo\n        //como no podemos mutar el estado ya que tenemos que enviar un nuevo estado como por ejemplo unos changedTodo\n\n        // aca construimos nuestro nuevo estado, iteramos sobre todos los todo mediante map y para cada todo vamos a retornar(por ello agregamos el paraentesis)\n        // y decimos que si el id del todo sobre el cual iteramos es el mismo al id que estamos recibiendo entoncess vamos a retornar el todoEdite en caso contrario \n        // vamos a retornar el todo sin editar\n        // vemos como en esta caso el todoEdit lo traemos directamente en el argumento(esto va a ser un objeto que va a contener id,title, description complete) y estaremos pensando\n        // que en el formvalues tenemos solo title y description como para editar el funcionamiento es distinto los formValues rciben lo que tiene todoEdit\n        // y el estado global de  todoEdit si contiene id y complete, por lo tanto cuando enviemos los formValues para actualizar a diferencia de cuando loe enviamos para agreagar si contienen\n        //  el id y complete\n        const changedTodos = todos.map(todo => (\n            todo.id === todoEdit.id\n                ? todoEdit\n                : todo\n        ))\n\n        setTodos(changedTodos) //construimos nuestro nuevo estado (changedTodos) ver mas arriba\n    }// enviamo esta funcion a nuestro componente de formulario\n\n\n    return (\n        <div className='container mt-4'>\n            <div className='row'>\n                <div className='col-8'>\n                    <TodoList\n                        todos={todos}\n                        todoDelete={todoDelete}\n                        todoToogleCompleted={todoToogleCompleted}\n                        setTodoEdit={setTodoEdit}\n                    />\n                </div>\n                <div className='col-4'>\n                    <TodoForm\n                        // estados\n                        todoEdit={todoEdit}\n                        // funciones\n                        todoAdd={todoAdd}\n                        //     {/* vamos a utilizarlos en el todoForm pero como cargariamos estos valos sin afectar el comportamiento actual \n                        // de nuestra aplicacion ? lo haremos usando hooks useEfect ... ver todoForm.js*/}\n                        todoUpdate={todoUpdate}\n                        setTodoEdit={setTodoEdit} //vamos al todoForm donde utilizaremos esta funcion y la recibimos en las properties\n                    />\n\n\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}