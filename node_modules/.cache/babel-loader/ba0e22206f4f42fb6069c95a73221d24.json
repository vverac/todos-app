{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoList.js\";\n// import React from 'react'\n// import Todo from './Todo'\n// //props\n// // creamos estas props(objetos de tareas) por queremos que cada todo muestre informacion diferente \n// // const todo1 = {\n// //     title: 'todo #1',\n// //     description: 'Descripcion Todo #1',\n// //     complete: false,\n// // }\n// // const todo2 = {\n// //     title: 'todo #2',\n// //     description: 'Descripcion Todo #2',\n// //     complete: true,\n// // }\n// // aca haremos qu cada todo forme parte de una lista quqe sera un arreglo dond el primer elemnto sera el todo1\n// const todos = [\n//     {\n//         title: 'todo #1',\n//         description: 'Descripcion Todo #1',\n//         complete: false,\n//     },\n//     {\n//         title: 'todo #2',\n//         description: 'Descripcion Todo #2',\n//         complete: true,\n//     }\n// ]\n// //  ahora como renderizamos esta lista de todods en nuestro componente? primero quedaremos con 1 todo\n// function TodoList() {\n//     return (\n//         <div>\n//             <h1>TodoList</h1>\n//             {/* <Todo\n//                 // aca tenemos una propiedad todo y recibe el contenido del objeto todo1\n//                 //    enviamos todo de este componente padre\n//                 todo={todo1} />\n//             <Todo\n//                 // aca tenemos una propiedad todo y recibe el contenido del objeto todo2, tambien tenemos que modificar el componete\n//                 todo={todo2} /> */}\n//             {/* despues de sacar los  Todo  ecribiremos una sentencia de js, para recorrer para recorrer nuestro objeto */}\n//             {/* // en el componente Todo enviamos cada uno de los todo que son sobre los que estamos iterando */}\n//             {\n//                 todos.map(todo => <Todo todo={todo} />)\n//                 // explicacion de esto: iteramos con map sobre nuestro arreglo y recorre cada elemento a los que les colocara el sobrenombre todo,\n//                 // es decir en la primera iteracion este todo se refiere al primer elemento y en la segunda iteracion se refiere al segundo elemento,\n//                 // y por cada iteracion retorna un componente Todo y este recibira una propiedad todo y a este todo le entregaremos la tarea sobre la \n//                 // que estaremos iterando(todo naranjo), en resumen le estamos entregando a la prop(todo blanco)\n//                 // el todo verde es el que estamos recibiendo en el componente tarea( en el Todo.js)\n//             }\n//         </div>\n//     )\n// }\n// export default TodoList\nimport React, { useState } from 'react';\nimport Todo from './Todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst todos = [{\n  title: 'todo #1',\n  description: 'Descripcion Todo #1',\n  complete: false\n}, {\n  title: 'todo #2',\n  description: 'Descripcion Todo #2',\n  complete: true\n}]; // hasta ahora solo estabamos solo estabamos realizando una iteracion para mostrar componentes\n\nfunction TodoList() {\n  // solo dentro del componente usamos hooks\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n      todo: todo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","Todo","todos","title","description","complete","TodoList","map","todo"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoList.js"],"sourcesContent":["// import React from 'react'\n// import Todo from './Todo'\n\n\n// //props\n// // creamos estas props(objetos de tareas) por queremos que cada todo muestre informacion diferente \n// // const todo1 = {\n// //     title: 'todo #1',\n// //     description: 'Descripcion Todo #1',\n// //     complete: false,\n// // }\n// // const todo2 = {\n// //     title: 'todo #2',\n// //     description: 'Descripcion Todo #2',\n// //     complete: true,\n// // }\n\n// // aca haremos qu cada todo forme parte de una lista quqe sera un arreglo dond el primer elemnto sera el todo1\n// const todos = [\n\n//     {\n//         title: 'todo #1',\n//         description: 'Descripcion Todo #1',\n//         complete: false,\n//     },\n//     {\n//         title: 'todo #2',\n//         description: 'Descripcion Todo #2',\n//         complete: true,\n//     }\n\n// ]\n// //  ahora como renderizamos esta lista de todods en nuestro componente? primero quedaremos con 1 todo\n\n\n// function TodoList() {\n//     return (\n//         <div>\n//             <h1>TodoList</h1>\n\n\n//             {/* <Todo\n//                 // aca tenemos una propiedad todo y recibe el contenido del objeto todo1\n//                 //    enviamos todo de este componente padre\n//                 todo={todo1} />\n//             <Todo\n//                 // aca tenemos una propiedad todo y recibe el contenido del objeto todo2, tambien tenemos que modificar el componete\n//                 todo={todo2} /> */}\n\n//             {/* despues de sacar los  Todo  ecribiremos una sentencia de js, para recorrer para recorrer nuestro objeto */}\n\n\n//             {/* // en el componente Todo enviamos cada uno de los todo que son sobre los que estamos iterando */}\n//             {\n//                 todos.map(todo => <Todo todo={todo} />)\n//                 // explicacion de esto: iteramos con map sobre nuestro arreglo y recorre cada elemento a los que les colocara el sobrenombre todo,\n//                 // es decir en la primera iteracion este todo se refiere al primer elemento y en la segunda iteracion se refiere al segundo elemento,\n//                 // y por cada iteracion retorna un componente Todo y este recibira una propiedad todo y a este todo le entregaremos la tarea sobre la \n//                 // que estaremos iterando(todo naranjo), en resumen le estamos entregando a la prop(todo blanco)\n//                 // el todo verde es el que estamos recibiendo en el componente tarea( en el Todo.js)\n//             }\n//         </div>\n//     )\n// }\n\n// export default TodoList\n\n\n\nimport React, { useState } from 'react'\nimport Todo from './Todo'\n\nconst todos = [\n\n    {\n        title: 'todo #1',\n        description: 'Descripcion Todo #1',\n        complete: false,\n    },\n    {\n        title: 'todo #2',\n        description: 'Descripcion Todo #2',\n        complete: true,\n    }\n]\n// hasta ahora solo estabamos solo estabamos realizando una iteracion para mostrar componentes\nfunction TodoList() {\n    // solo dentro del componente usamos hooks\n    return (\n        <div>\n            <h1>TodoList</h1>\n            {\n                todos.map(todo => <Todo todo={todo} />)\n            }\n        </div>\n    )\n}\n\nexport default TodoList\n\n\n\n\n"],"mappings":";AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAK,GAAG,CAEV;EACIC,KAAK,EAAE,SADX;EAEIC,WAAW,EAAE,qBAFjB;EAGIC,QAAQ,EAAE;AAHd,CAFU,EAOV;EACIF,KAAK,EAAE,SADX;EAEIC,WAAW,EAAE,qBAFjB;EAGIC,QAAQ,EAAE;AAHd,CAPU,CAAd,C,CAaA;;AACA,SAASC,QAAT,GAAoB;EAChB;EACA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAGQJ,KAAK,CAACK,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;MAAM,IAAI,EAAEA;IAAZ;MAAA;MAAA;MAAA;IAAA,QAAlB,CAHR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH;;KAVQF,Q;AAYT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}