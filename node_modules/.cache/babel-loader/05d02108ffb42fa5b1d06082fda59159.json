{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  title: '',\n  description: ''\n}; // ahora como vinculamos nuestros input con este estado en especifico? una forma sencilla es enviandolo mediante el parametro values para ello\n// desestructaremos estos formValues\n\nfunction TodoForm() {\n  _s();\n\n  // usamos nuestro hooks dentro del componente y creamos un nuevo state\n  // que retorna dos valores donde el primero es los valores y el segundo es la funcion de actualizacion\n  // y sera igual al useState que recibe el estado inicial\n  //  como estamos trabajando con valores de formulario llamamos a nustras variables que nos sean mas faciles de reconocer\n  const [formValues, setformValues] = useState(initialFormValues); // creamos mas arriba de esta funcion el estado de initialFormValues\n  // pero como vinculamos nuestros input con este estado en especifico, serian envialdolo en el paramatro values\n  // enetonces desestructuremos estos formValues y diremos que de formValues extraeremos estos dos stributos en una variable con \n  // el mismo nombre y ya los podemos utilizar como una variable\n  //  con esto agregaremos al input de Titulo le agregamos un value title  en modo javaScrirpt y lo mismo con descripcion le eviamos el value description\n\n  const {\n    title,\n    description\n  } = formValues;\n\n  const handleInputChange = e => {\n    // cuando llamamos una funcion desde un evento su primer evento sera ese mismo evento(e)\n    // y ahora necesiamos actualizar esos formValues con el nuevo valor que estamos recibiendo en cada una de las actualizaciones,\n    // eso lo hacemos con setFormValues y le enviamos changedFormValues\n    const changedFormValues = { // estos formVlues seran los mismos formValues pero con la actualizacion\n      ...formValues,\n      //pasamos el operador spred con diferencia que se harea una actualizacion en el caso de que cambie un input u otro\n      //    pero lo que buscamos es que cuando cambie el input de title el atributo que aqui cambie sea el de title los mismo con description\n      [e.target.name]: e.target.value // usaremos estos corchetes que indican que el atributo sera una variable y le decimos \n      //    del evento vamonos al target(es decir a cada una de las etiquetas en el caso del input al input en el caso del textarea al textarea)\n\n    }; // ahora necesitamos que al hacer click en agregar tarea se nos agregue la tarea que estamos agregando en el formulario \n    // el evento puedo ser un onclick un onsubmit\n\n    setformValues(changedFormValues); //estos changedFormValues seran.... ver mas arriba\n  }; //esta funcion controlara el cambio del input del formulario y esta funcion se la agregamos(al input y texarea) a en el evento onChange ,\n  //  es decir cuando cambie el formulario cuando estemos escribiendo un valor distinto al que ya estaba se ejecutara esta funcion\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nueva Tarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Titulo\",\n        className: \"form-control\",\n        value: title,\n        name: \"title\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Descripcion\",\n        className: \"form-control mt-2\",\n        value: description,\n        name: \"description\" //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n        ,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-block mt-2\",\n        children: \"Agregar Tarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n} // queremos que lo que escribamos en nuestro formulario se actualica en tiempo real en un estado de React\n//  por lo tanato crearemos un nuevo estado para nuestra aplicacion, usaremos useState\n\n\n_s(TodoForm, \"YxEzYOKZbSG4b2If71QjjGsAKm0=\");\n\n_c = TodoForm;\nexport default TodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","initialFormValues","title","description","TodoForm","formValues","setformValues","handleInputChange","e","changedFormValues","target","name","value"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js"],"sourcesContent":["import React, { useState } from 'react'\n\n\nconst initialFormValues = {\n    title: '',\n    description: '',\n\n}\n// ahora como vinculamos nuestros input con este estado en especifico? una forma sencilla es enviandolo mediante el parametro values para ello\n// desestructaremos estos formValues\n\n\nfunction TodoForm() {\n    // usamos nuestro hooks dentro del componente y creamos un nuevo state\n    // que retorna dos valores donde el primero es los valores y el segundo es la funcion de actualizacion\n    // y sera igual al useState que recibe el estado inicial\n    //  como estamos trabajando con valores de formulario llamamos a nustras variables que nos sean mas faciles de reconocer\n    const [formValues, setformValues] = useState(initialFormValues)\n    // creamos mas arriba de esta funcion el estado de initialFormValues\n\n    // pero como vinculamos nuestros input con este estado en especifico, serian envialdolo en el paramatro values\n    // enetonces desestructuremos estos formValues y diremos que de formValues extraeremos estos dos stributos en una variable con \n    // el mismo nombre y ya los podemos utilizar como una variable\n    //  con esto agregaremos al input de Titulo le agregamos un value title  en modo javaScrirpt y lo mismo con descripcion le eviamos el value description\n    const { title, description } = formValues;\n    const handleInputChange = (e) => {\n        // cuando llamamos una funcion desde un evento su primer evento sera ese mismo evento(e)\n        // y ahora necesiamos actualizar esos formValues con el nuevo valor que estamos recibiendo en cada una de las actualizaciones,\n        // eso lo hacemos con setFormValues y le enviamos changedFormValues\n        const changedFormValues = {\n            // estos formVlues seran los mismos formValues pero con la actualizacion\n            ...formValues, //pasamos el operador spred con diferencia que se harea una actualizacion en el caso de que cambie un input u otro\n            //    pero lo que buscamos es que cuando cambie el input de title el atributo que aqui cambie sea el de title los mismo con description\n            [e.target.name]: e.target.value// usaremos estos corchetes que indican que el atributo sera una variable y le decimos \n            //    del evento vamonos al target(es decir a cada una de las etiquetas en el caso del input al input en el caso del textarea al textarea)\n        }\n        // ahora necesitamos que al hacer click en agregar tarea se nos agregue la tarea que estamos agregando en el formulario \n        // el evento puedo ser un onclick un onsubmit\n\n        setformValues(changedFormValues) //estos changedFormValues seran.... ver mas arriba\n\n    } //esta funcion controlara el cambio del input del formulario y esta funcion se la agregamos(al input y texarea) a en el evento onChange ,\n    //  es decir cuando cambie el formulario cuando estemos escribiendo un valor distinto al que ya estaba se ejecutara esta funcion\n    return (\n        <div>\n            <h1>Nueva Tarea</h1>\n            <form>\n                <input\n                    type='text'\n                    placeholder='Titulo'\n                    className='form-control'\n                    value={title}\n                    name='title'\n                    onChange={handleInputChange}\n                />\n                <textarea\n                    placeholder='Descripcion'\n                    className='form-control mt-2'\n                    value={description}\n                    name='description' //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n                    onChange={handleInputChange}\n                >\n                </textarea>\n                <button\n                    className='btn btn-primary btn-block mt-2'>\n                    Agregar Tarea\n                </button>\n            </form>\n        </div>\n    )\n}\n// queremos que lo que escribamos en nuestro formulario se actualica en tiempo real en un estado de React\n//  por lo tanato crearemos un nuevo estado para nuestra aplicacion, usaremos useState\nexport default TodoForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,EADe;EAEtBC,WAAW,EAAE;AAFS,CAA1B,C,CAKA;AACA;;AAGA,SAASC,QAAT,GAAoB;EAAA;;EAChB;EACA;EACA;EACA;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAACC,iBAAD,CAA5C,CALgB,CAMhB;EAEA;EACA;EACA;EACA;;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAyBE,UAA/B;;EACA,MAAME,iBAAiB,GAAIC,CAAD,IAAO;IAC7B;IACA;IACA;IACA,MAAMC,iBAAiB,GAAG,EACtB;MACA,GAAGJ,UAFmB;MAEP;MACf;MACA,CAACG,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE,KAJJ,CAIS;MAC/B;;IALsB,CAA1B,CAJ6B,CAW7B;IACA;;IAEAN,aAAa,CAACG,iBAAD,CAAb,CAd6B,CAcI;EAEpC,CAhBD,CAbgB,CA6Bd;EACF;;;EACA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,wBACI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,QAFhB;QAGI,SAAS,EAAC,cAHd;QAII,KAAK,EAAEP,KAJX;QAKI,IAAI,EAAC,OALT;QAMI,QAAQ,EAAEK;MANd;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QACI,WAAW,EAAC,aADhB;QAEI,SAAS,EAAC,mBAFd;QAGI,KAAK,EAAEJ,WAHX;QAII,IAAI,EAAC,aAJT,CAIuB;QAJvB;QAKI,QAAQ,EAAEI;MALd;QAAA;QAAA;QAAA;MAAA,QATJ,eAiBI;QACI,SAAS,EAAC,gCADd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA2BH,C,CACD;AACA;;;GA5DSH,Q;;KAAAA,Q;AA6DT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}