{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList'; // esto lo trajimos desde TodoList\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTodos = [{\n  id: 1,\n  title: 'todo #1',\n  description: 'Descripcion Todo #1',\n  completed: false\n}, {\n  id: 2,\n  title: 'todo #2',\n  description: 'Descripcion Todo #2',\n  completed: true\n}];\n\nfunction App() {\n  _s();\n\n  // esto lo trajimos desde TodoList\n  const [todos, setTodos] = useState(initialTodos); // aca crearemos una funcion que nos permita eliminar, quqe sera funcion flecha que recibe el id del todo que vamos a eliminar\n\n  const todoDelete = todoId => {\n    const changedTodos = todos.filter(todo => todo.id !== todoId);\n    setTodos(changedTodos);\n  }; // creamos otra accion o funcion, que sera intermitente entre estado completado y no completado, \n  // al darle click debe cambiar entre uno y otro(completado y no completado), recibira un todoId para saber donde se hara la modificacion\n  // recordar que no podemos mutar el estado\n\n\n  const todoToogleCompleted = todoId => {\n    // entonces aca en el estado que tenga este todoId(que el argumento que pasamos arriba) cambiaremos\n    //  el estado de completado a no completado o vice versa\n    //  esta es la fofrma larga:\n    // iteraremos los todos con map y por cada compreobaciion vamos a decir: \n    const changedTodos = todos.map(todo => {\n      // que si el id del todo que estamos iterendo === al id del todo que recibimos como argumento\n      // entonces vamos a retornar un todo edit es decir un todo modificado\n      // sera un objeto que contiene lo mismo de el todo sobre el que iteramos, con la modificacion en este caso a la propiedad complete que sera igual \n      //  a lo contrario que tenia\n      const todoEdit = { ...todo,\n        completed: !todo.completed\n      };\n\n      if (todo.id === todoId) {\n        return todoEdit; // este todoEdit sera: ver linea de arriba\n        // en caso contrario retornamos el mismo todo sin actualizar\n      } else {\n        return todo;\n      }\n    });\n    setTodos(changedTodos); //aca hacemos unsetTodos y le enviamos un nuevo estado que seran los changedTodos(que los creamos mas arriba como cte\n    // que seran los mismos todos pero con una modificacion)\n  }; // terminado esto enviamos la funcion al componenete donde se necesita que es el Todo.js pero para llegar al Todo debemos primero enviar al padre TodoList ver mas abajo\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-8\",\n        children: /*#__PURE__*/_jsxDEV(TodoList, {\n          todos: todos,\n          todoDelete: todoDelete,\n          todoToogleCompleted: todoToogleCompleted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4\",\n        children: /*#__PURE__*/_jsxDEV(TodoForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"8yCmoPUuqM1vaUbV/+pWostrM30=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TodoForm","TodoList","initialTodos","id","title","description","completed","App","todos","setTodos","todoDelete","todoId","changedTodos","filter","todo","todoToogleCompleted","map","todoEdit"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react'\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList'\n\n// esto lo trajimos desde TodoList\nconst initialTodos = [\n    {\n        id: 1,\n        title: 'todo #1',\n        description: 'Descripcion Todo #1',\n        completed: false,\n    },\n    {\n        id: 2,\n        title: 'todo #2',\n        description: 'Descripcion Todo #2',\n        completed: true,\n    }\n]\n\nfunction App() {\n    // esto lo trajimos desde TodoList\n    const [todos, setTodos] = useState(initialTodos)\n\n    // aca crearemos una funcion que nos permita eliminar, quqe sera funcion flecha que recibe el id del todo que vamos a eliminar\n    const todoDelete = (todoId) => {\n        const changedTodos = todos.filter(todo => todo.id !== todoId)\n        setTodos(changedTodos);\n    }\n    // creamos otra accion o funcion, que sera intermitente entre estado completado y no completado, \n    // al darle click debe cambiar entre uno y otro(completado y no completado), recibira un todoId para saber donde se hara la modificacion\n    // recordar que no podemos mutar el estado\n    const todoToogleCompleted = (todoId) => {\n\n        // entonces aca en el estado que tenga este todoId(que el argumento que pasamos arriba) cambiaremos\n        //  el estado de completado a no completado o vice versa\n        //  esta es la fofrma larga:\n        // iteraremos los todos con map y por cada compreobaciion vamos a decir: \n        const changedTodos = todos.map(todo => {\n            // que si el id del todo que estamos iterendo === al id del todo que recibimos como argumento\n            // entonces vamos a retornar un todo edit es decir un todo modificado\n\n            // sera un objeto que contiene lo mismo de el todo sobre el que iteramos, con la modificacion en este caso a la propiedad complete que sera igual \n            //  a lo contrario que tenia\n            const todoEdit = {\n                ...todo,\n                completed: !todo.completed\n\n            }\n\n            if (todo.id === todoId) {\n                return todoEdit // este todoEdit sera: ver linea de arriba\n                // en caso contrario retornamos el mismo todo sin actualizar\n            } else {\n                return todo\n            }\n        })\n        setTodos(changedTodos) //aca hacemos unsetTodos y le enviamos un nuevo estado que seran los changedTodos(que los creamos mas arriba como cte\n        // que seran los mismos todos pero con una modificacion)\n    } // terminado esto enviamos la funcion al componenete donde se necesita que es el Todo.js pero para llegar al Todo debemos primero enviar al padre TodoList ver mas abajo\n\n    return (\n        <div className='container mt-4'>\n            <div className='row'>\n                <div className='col-8'>\n                    <TodoList\n                        todos={todos}\n                        todoDelete={todoDelete}\n                        todoToogleCompleted={todoToogleCompleted}\n                    />\n                </div>\n                <div className='col-4'>\n                    <TodoForm />\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default App"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,SAFX;EAGIC,WAAW,EAAE,qBAHjB;EAIIC,SAAS,EAAE;AAJf,CADiB,EAOjB;EACIH,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,SAFX;EAGIC,WAAW,EAAE,qBAHjB;EAIIC,SAAS,EAAE;AAJf,CAPiB,CAArB;;AAeA,SAASC,GAAT,GAAe;EAAA;;EACX;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACG,YAAD,CAAlC,CAFW,CAIX;;EACA,MAAMQ,UAAU,GAAIC,MAAD,IAAY;IAC3B,MAAMC,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYQ,MAAjC,CAArB;IACAF,QAAQ,CAACG,YAAD,CAAR;EACH,CAHD,CALW,CASX;EACA;EACA;;;EACA,MAAMG,mBAAmB,GAAIJ,MAAD,IAAY;IAEpC;IACA;IACA;IACA;IACA,MAAMC,YAAY,GAAGJ,KAAK,CAACQ,GAAN,CAAUF,IAAI,IAAI;MACnC;MACA;MAEA;MACA;MACA,MAAMG,QAAQ,GAAG,EACb,GAAGH,IADU;QAEbR,SAAS,EAAE,CAACQ,IAAI,CAACR;MAFJ,CAAjB;;MAMA,IAAIQ,IAAI,CAACX,EAAL,KAAYQ,MAAhB,EAAwB;QACpB,OAAOM,QAAP,CADoB,CACJ;QAChB;MACH,CAHD,MAGO;QACH,OAAOH,IAAP;MACH;IACJ,CAlBoB,CAArB;IAmBAL,QAAQ,CAACG,YAAD,CAAR,CAzBoC,CAyBb;IACvB;EACH,CA3BD,CAZW,CAuCT;;;EAEF,oBACI;IAAK,SAAS,EAAC,gBAAf;IAAA,uBACI;MAAK,SAAS,EAAC,KAAf;MAAA,wBACI;QAAK,SAAS,EAAC,OAAf;QAAA,uBACI,QAAC,QAAD;UACI,KAAK,EAAEJ,KADX;UAEI,UAAU,EAAEE,UAFhB;UAGI,mBAAmB,EAAEK;QAHzB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAQI;QAAK,SAAS,EAAC,OAAf;QAAA,uBACI,QAAC,QAAD;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QARJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH;;GA3DQR,G;;KAAAA,G;AA6DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}