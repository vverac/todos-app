{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //usaremos este nuevo hooks useEfect para no afectar el comportamiento actual de nuestra aplicacion\n// que nos permitira que cuando el estado es este caso el todoedit cambie por un valor\n// al presionar editar en cualquiera de las tarea y react al darse cuenta d eese cambio de eestado se \n// rellene la informacion de los form values con ese nuevo valor que estamos recibiendo, lo usaremos debajo de nuestros estados...\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  title: '',\n  description: ''\n};\n\nfunction TodoForm(_ref) {\n  _s();\n\n  let {\n    todoAdd,\n    todoEdit\n  } = _ref;\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const {\n    title,\n    description\n  } = formValues;\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // recibe 2 argumento donde el segundo es un arreglo de dependencias(de useEfect) ...lo que significa que si coloco todoEdit cuando este cambie se ejecutara una funcion en el  primer argumento\n\n  useEffect(() => {\n    if (todoEdit) {\n      setFormValues(todoEdit);\n    } //aca estamos diciendo que si todoedit esta en null esto nunca se va a ejecutar\n\n  }, [todoEdit]); //este arreglo de dependencias (el arreglo) puede tener muchas dependencias por ejemplo\n  // [todoEdit,state2, state3,state4] y que uno de ellos cambie de valor se ejecuta el calback o funcion\n  // en este caso solo necesitamos  un state que es el todoedit sera la funcion que el useEfect estara escuchando\n  // tambien podriamos tener un arreglo vacio que indicaria ... si bien el useEfect siempre se ejecutara una vez al renderizarse el componente tenga \n  // o no tenga dependencias  y en caso de que no tenga dependencias solo se ejecutaraesa primera vez y ne caso de que tenga una dependencia se ejecutara la primera vez y adicionalmente\n  // cada vez que esas dependencias por lo menos una cambie\n  // entonces lo que queremos hacer y es cuando cambie el todoEdit  los fromValues  tomen lo que tiene el todoEdit\n\n  const handleInputChange = e => {\n    const changedFormValues = { ...formValues,\n      [e.target.name]: e.target.value\n    };\n    setFormValues(changedFormValues);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (title.trim() === '') {\n      setError('Debes Indicar un Titulo');\n      return;\n    } // hacemos lo mismo para description\n\n\n    if (description.trim() === '') {\n      setError('Debes Indicar una Descripcion');\n      return;\n    } // agregar tareas\n\n\n    todoAdd(formValues);\n    setFormValues(initialFormValues); // limpiando el formulario luego de agregar una tarea, enviamo los datos inicialaes\n\n    setSuccessMessage('Agregado con exito');\n    setTimeout(() => {\n      setSuccessMessage(null);\n    }, 2000);\n    setError(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: todoEdit ? 'Editar Tarea' : 'Nueva Tarea'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Titulo\",\n        className: \"form-control\",\n        value: title,\n        name: \"title\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Descripcion\",\n        className: \"form-control mt-2\",\n        value: description,\n        name: \"description\" //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n        ,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-block mt-2\",\n        children: todoEdit ? 'Actulizar Tarea' : ' Agregar Tarea'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger mt-2\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success mt-2\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoForm, \"mygRIXICMVDfxSZQmaYvK8yGDNk=\");\n\n_c = TodoForm;\nexport default TodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","useEffect","initialFormValues","title","description","TodoForm","todoAdd","todoEdit","formValues","setFormValues","error","setError","successMessage","setSuccessMessage","handleInputChange","e","changedFormValues","target","name","value","handleSubmit","preventDefault","trim","setTimeout"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react'\n//usaremos este nuevo hooks useEfect para no afectar el comportamiento actual de nuestra aplicacion\n// que nos permitira que cuando el estado es este caso el todoedit cambie por un valor\n// al presionar editar en cualquiera de las tarea y react al darse cuenta d eese cambio de eestado se \n// rellene la informacion de los form values con ese nuevo valor que estamos recibiendo, lo usaremos debajo de nuestros estados...\nconst initialFormValues = {\n    title: '',\n    description: '',\n\n}\n\nfunction TodoForm({ todoAdd, todoEdit }) {\n    const [formValues, setFormValues] = useState(initialFormValues)\n    const { title, description } = formValues;\n    const [error, setError] = useState(null)\n    const [successMessage, setSuccessMessage] = useState(null)\n\n    // recibe 2 argumento donde el segundo es un arreglo de dependencias(de useEfect) ...lo que significa que si coloco todoEdit cuando este cambie se ejecutara una funcion en el  primer argumento\n    useEffect(() => {\n        if (todoEdit) {\n            setFormValues(todoEdit)\n        } //aca estamos diciendo que si todoedit esta en null esto nunca se va a ejecutar\n\n\n    }, [todoEdit]) //este arreglo de dependencias (el arreglo) puede tener muchas dependencias por ejemplo\n    // [todoEdit,state2, state3,state4] y que uno de ellos cambie de valor se ejecuta el calback o funcion\n    // en este caso solo necesitamos  un state que es el todoedit sera la funcion que el useEfect estara escuchando\n    // tambien podriamos tener un arreglo vacio que indicaria ... si bien el useEfect siempre se ejecutara una vez al renderizarse el componente tenga \n    // o no tenga dependencias  y en caso de que no tenga dependencias solo se ejecutaraesa primera vez y ne caso de que tenga una dependencia se ejecutara la primera vez y adicionalmente\n    // cada vez que esas dependencias por lo menos una cambie\n    // entonces lo que queremos hacer y es cuando cambie el todoEdit  los fromValues  tomen lo que tiene el todoEdit\n\n    const handleInputChange = (e) => {\n        const changedFormValues = {\n            ...formValues,\n            [e.target.name]: e.target.value\n        }\n        setFormValues(changedFormValues)\n\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if (title.trim() === '') {\n            setError('Debes Indicar un Titulo')\n            return;\n\n        }\n        // hacemos lo mismo para description\n        if (description.trim() === '') {\n            setError('Debes Indicar una Descripcion')\n            return;\n        }\n\n        // agregar tareas\n        todoAdd(formValues)\n        setFormValues(initialFormValues)// limpiando el formulario luego de agregar una tarea, enviamo los datos inicialaes\n        setSuccessMessage('Agregado con exito')\n\n        setTimeout(() => {\n            setSuccessMessage(null)\n        }, 2000)\n\n        setError(null)\n\n    }\n    return (\n        <div>\n            <h1>{todoEdit ? 'Editar Tarea' : 'Nueva Tarea'}</h1>\n            <form onSubmit={handleSubmit}>\n                {/* onSubmit sera igual a una funcion que no hemos agregado que llamaremos handlesubmit  y la crearemos mas arriba*/}\n                <input\n                    type='text'\n                    placeholder='Titulo'\n                    className='form-control'\n                    value={title}\n                    name='title'\n                    onChange={handleInputChange}\n                />\n                <textarea\n                    placeholder='Descripcion'\n                    className='form-control mt-2'\n                    value={description}\n                    name='description' //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n                    onChange={handleInputChange}\n                >\n                </textarea>\n                <button\n                    className='btn btn-primary btn-block mt-2'>\n                    {todoEdit ? 'Actulizar Tarea' : ' Agregar Tarea'}\n                </button>\n            </form>\n            {\n                error &&\n                (\n                    <div className='alert alert-danger mt-2'>{error}</div>\n                )\n            }\n            {\n                successMessage &&\n                (\n                    <div className='alert alert-success mt-2'>{successMessage}</div>\n                )\n            }\n        </div>\n    )\n}\nexport default TodoForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}