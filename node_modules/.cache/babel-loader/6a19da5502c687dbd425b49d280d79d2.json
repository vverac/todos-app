{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js\",\n    _s = $RefreshSig$();\n\n// que pas si enviamos una tarea vacia? hasta ahora igual se agrega  lo qu no debria ser \n// lo quqe solucionaremos creando un avalidacion que compruebe que tanto el titulo y la dessripcion\n// deeben tener contenido para guardarse, lo haremos en submit\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFormValues = {\n  title: '',\n  description: ''\n};\n\nfunction TodoForm(_ref) {\n  _s();\n\n  let {\n    todoAdd\n  } = _ref;\n  const [formValues, setformValues] = useState(initialFormValues);\n  const {\n    title,\n    description\n  } = formValues;\n  const [error, setError] = useState(null);\n\n  const handleInputChange = e => {\n    const changedFormValues = { ...formValues,\n      [e.target.name]: e.target.value\n    };\n    setformValues(changedFormValues);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); //  previniendo el efecto por defaut del formulario\n\n    if (title === '') {\n      //title eya lo estamos destructurando de los formValues para utilizarlos de una forma mas facil\n      return; // tambien mostraremos por pantalla al usuario por que no se garega la tarea\n    }\n\n    todoAdd(formValues);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nueva Tarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Titulo\",\n        className: \"form-control\",\n        value: title,\n        name: \"title\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Descripcion\",\n        className: \"form-control mt-2\",\n        value: description,\n        name: \"description\" //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n        ,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-block mt-2\",\n        children: \"Agregar Tarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoForm, \"2pz1N6KrRnDyLiYQDsZXaBMxizs=\");\n\n_c = TodoForm;\nexport default TodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","initialFormValues","title","description","TodoForm","todoAdd","formValues","setformValues","error","setError","handleInputChange","e","changedFormValues","target","name","value","handleSubmit","preventDefault"],"sources":["/Users/viviana/Desktop/ejercicios/todo-app/src/components/TodoForm.js"],"sourcesContent":["// que pas si enviamos una tarea vacia? hasta ahora igual se agrega  lo qu no debria ser \n// lo quqe solucionaremos creando un avalidacion que compruebe que tanto el titulo y la dessripcion\n// deeben tener contenido para guardarse, lo haremos en submit\n\n\nimport React, { useState } from 'react'\n\nconst initialFormValues = {\n    title: '',\n    description: '',\n\n}\n\nfunction TodoForm({ todoAdd }) {\n    const [formValues, setformValues] = useState(initialFormValues)\n    const { title, description } = formValues;\n    const [error, setError] = useState(null)\n\n\n    const handleInputChange = (e) => {\n        const changedFormValues = {\n            ...formValues,\n            [e.target.name]: e.target.value\n        }\n        setformValues(changedFormValues)\n\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault() //  previniendo el efecto por defaut del formulario\n\n        if (title === '') {\n            //title eya lo estamos destructurando de los formValues para utilizarlos de una forma mas facil\n            return;\n            // tambien mostraremos por pantalla al usuario por que no se garega la tarea\n        }\n\n        todoAdd(formValues)\n    }\n    return (\n        <div>\n            <h1>Nueva Tarea</h1>\n            <form onSubmit={handleSubmit}>\n                {/* onSubmit sera igual a una funcion que no hemos agregado que llamaremos handlesubmit  y la crearemos mas arriba*/}\n                <input\n                    type='text'\n                    placeholder='Titulo'\n                    className='form-control'\n                    value={title}\n                    name='title'\n                    onChange={handleInputChange}\n                />\n                <textarea\n                    placeholder='Descripcion'\n                    className='form-control mt-2'\n                    value={description}\n                    name='description' //conozcamos la utilidad de colocar este atributo (name) a cada input crearemos una funcion handleInputChange\n                    onChange={handleInputChange}\n                >\n                </textarea>\n                <button\n                    className='btn btn-primary btn-block mt-2'>\n                    Agregar Tarea\n                </button>\n            </form>\n        </div>\n    )\n}\nexport default TodoForm"],"mappings":";;;AAAA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,EADe;EAEtBC,WAAW,EAAE;AAFS,CAA1B;;AAMA,SAASC,QAAT,OAA+B;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAC3B,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACC,iBAAD,CAA5C;EACA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAyBG,UAA/B;EACA,MAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;;EAGA,MAAMU,iBAAiB,GAAIC,CAAD,IAAO;IAC7B,MAAMC,iBAAiB,GAAG,EACtB,GAAGN,UADmB;MAEtB,CAACK,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;IAFJ,CAA1B;IAIAR,aAAa,CAACK,iBAAD,CAAb;EAEH,CAPD;;EAQA,MAAMI,YAAY,GAAIL,CAAD,IAAO;IACxBA,CAAC,CAACM,cAAF,GADwB,CACL;;IAEnB,IAAIf,KAAK,KAAK,EAAd,EAAkB;MACd;MACA,OAFc,CAGd;IACH;;IAEDG,OAAO,CAACC,UAAD,CAAP;EACH,CAVD;;EAWA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAM,QAAQ,EAAEU,YAAhB;MAAA,wBAEI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,QAFhB;QAGI,SAAS,EAAC,cAHd;QAII,KAAK,EAAEd,KAJX;QAKI,IAAI,EAAC,OALT;QAMI,QAAQ,EAAEQ;MANd;QAAA;QAAA;QAAA;MAAA,QAFJ,eAUI;QACI,WAAW,EAAC,aADhB;QAEI,SAAS,EAAC,mBAFd;QAGI,KAAK,EAAEP,WAHX;QAII,IAAI,EAAC,aAJT,CAIuB;QAJvB;QAKI,QAAQ,EAAEO;MALd;QAAA;QAAA;QAAA;MAAA,QAVJ,eAkBI;QACI,SAAS,EAAC,gCADd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAlBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA4BH;;GArDQN,Q;;KAAAA,Q;AAsDT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}